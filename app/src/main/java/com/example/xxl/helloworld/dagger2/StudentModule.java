package com.example.xxl.helloworld.dagger2;

import com.example.xxl.helloworld.MainActivity;

import javax.inject.Singleton;

import dagger.Module;
import dagger.Provides;

/**
 * Created by xxl on 19/4/27.
 * <p>
 * Description @Module 注解配合 @Component 使用
 *
 * @Module 作用其实就只是 表示 我是一个Module 时给Component 用的
 **/
@Module
public class StudentModule {
    private MainActivity mMainActivity;

    public StudentModule(MainActivity mainActivity) {
        this.mMainActivity = mainActivity;
    }

    /**
     * @return
     * @Provides //@Provides 注解会生生成 StudentModule_ProvideStudentFactory 类
     * <p>
     * // Generated by Dagger (https://google.github.io/dagger).
     * package com.example.xxl.helloworld.dagger2;
     * <p>
     * import dagger.internal.Factory;
     * import dagger.internal.Preconditions;
     * <p>
     * public final class StudentModule_ProvideStudentFactory implements Factory<Student> {
     * private final StudentModule module;
     * <p>
     * public StudentModule_ProvideStudentFactory(StudentModule module) {
     * this.module = module;
     * }
     * @Override public Student get() {
     * return Preconditions.checkNotNull(  // 这里就是 StudentModule 下面的方法provideStudent 了
     * module.provideStudent(), "Cannot return null from a non-@Nullable @Provides method");
     * }
     * <p>
     * public static StudentModule_ProvideStudentFactory create(StudentModule module) {
     * return new StudentModule_ProvideStudentFactory(module);
     * }
     * <p>
     * public static Student proxyProvideStudent(StudentModule instance) {
     * return Preconditions.checkNotNull(
     * instance.provideStudent(), "Cannot return null from a non-@Nullable @Provides method");
     * }
     * }
     */
    @Singleton // 单例 这里加了 之后 StudentComponent也必须加 否则编译不过
    @Provides
    Student provideStudent() {
        return new Student();
    }

    /**
     *加了 @Singleton 之后  DaggerStudentComponent 会有不同的地方
     *
     * 这个就是单利对象的实现拉  具体看 DoubleCheck  源码
     * DoubleCheck.provider(StudentModule_ProvideStudentFactory.create(builder.studentModule));
     *
     @SuppressWarnings("unchecked") private void initialize(final Builder builder) {
     this.provideStudentProvider =
     DoubleCheck.provider(StudentModule_ProvideStudentFactory.create(builder.studentModule));
     }
     */
}
